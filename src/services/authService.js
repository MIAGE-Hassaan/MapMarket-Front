import { jwtDecode } from "jwt-decode";
import axios from "axios";

const API_URL = "http://mapmarketapi.test/api";
const TOKEN_KEY = "token";

// Fonction pour r√©cup√©rer le token de mani√®re s√©curis√©e
export const getToken = () => sessionStorage.getItem(TOKEN_KEY);

// ‚úÖ Connexion utilisateur avec gestion des erreurs
export const loginUser = async (email, password) => {
    try {
        const response = await axios.post(`${API_URL}/login`, { email, password });
        const token = response.data.token;

        if (!token) throw new Error("Token invalide ou manquant.");

        sessionStorage.setItem(TOKEN_KEY, token); // üîí Utilisation de sessionStorage au lieu de localStorage
        console.log("‚úÖ Token re√ßu et stock√© :", token);

        return response.data;
    } catch (error) {
        console.error("‚ùå Erreur lors de la connexion :", error.response?.data || error.message);
        throw error; // Relancer l'erreur pour la capturer c√¥t√© frontend
    }
};

// ‚úÖ D√©connexion avec gestion des erreurs et suppression s√©curis√©e du token
export const logoutUser = async (navigate) => {
    try {
        const token = getToken();
        if (!token) throw new Error("Aucun token disponible pour la d√©connexion.");

        console.log("üîë Token utilis√© pour la d√©connexion :", token);

        await axios.post(`${API_URL}/logout`, {}, {
            headers: { Authorization: `Bearer ${token}` }
        });

        sessionStorage.removeItem(TOKEN_KEY); // üîí Suppression s√©curis√©e
        navigate("/login");
    } catch (error) {
        console.error("‚ùå Erreur lors de la d√©connexion :", error.response?.data || error.message);
    }
};

// ‚úÖ √âtape 1 : Cr√©er un utilisateur (nom, pr√©nom, email)
export const registerUser = async (userData) => {
    try {
        const response = await axios.post(API_URL, userData);
        return response.data; // Retourne les donn√©es utilisateur
    } catch (error) {
        console.error("‚ùå Erreur lors de la cr√©ation de l'utilisateur :", error.response?.data || error.message);
        throw error;
    }
};

// ‚úÖ √âtape 2 : R√©cup√©rer l'UUID de l'utilisateur en recherchant par email
export const getUserUuidByEmail = async (email) => {
    try {
        const response = await axios.get(API_URL);
        const users = response.data; // Liste des utilisateurs
        const user = users.find((u) => u.email === email);

        if (!user) throw new Error("Utilisateur non trouv√©");

        return user.uuid; // Retourne l'UUID
    } catch (error) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration de l'UUID :", error.response?.data || error.message);
        throw error;
    }
};

// ‚úÖ √âtape 3 : Envoyer le mot de passe une fois l'UUID r√©cup√©r√©
export const setUserPassword = async (uuid, password) => {
    try {
        const response = await axios.post(`${API_URL}/${uuid}/password`, { password });
        return response.data;
    } catch (error) {
        console.error("‚ùå Erreur lors de l'ajout du mot de passe :", error.response?.data || error.message);
        throw error;
    }
};

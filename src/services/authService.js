import { jwtDecode } from "jwt-decode";
import axios from "axios";

const API_URL = "http://mapmarketapi.test/api";
const TOKEN_KEY = "token";

// Fonction pour r√©cup√©rer le token de mani√®re s√©curis√©e
export const getToken = () => sessionStorage.getItem(TOKEN_KEY);

// ‚úÖ Connexion utilisateur avec gestion des erreurs
export const loginUser = async (email, password) => {
    try {
        const response = await axios.post(`${API_URL}/login`, { email, password });
        const token = response.data.token;

        if (!token) throw new Error("Token invalide ou manquant.");

        sessionStorage.setItem(TOKEN_KEY, token); // üîí Utilisation de sessionStorage au lieu de localStorage
        console.log("‚úÖ Token re√ßu et stock√© :", token);

        return response.data;
    } catch (error) {
        console.error("‚ùå Erreur lors de la connexion :", error.response?.data || error.message);
        throw error; // Relancer l'erreur pour la capturer c√¥t√© frontend
    }
};

// ‚úÖ D√©connexion avec gestion des erreurs et suppression s√©curis√©e du token
export const logoutUser = async (navigate) => {
    try {
        const token = getToken();
        if (!token) throw new Error("Aucun token disponible pour la d√©connexion.");

        console.log("üîë Token utilis√© pour la d√©connexion :", token);

        await axios.post(`${API_URL}/logout`, {}, {
            headers: { Authorization: `Bearer ${token}` }
        });

        sessionStorage.removeItem(TOKEN_KEY); // üîí Suppression s√©curis√©e
        navigate("/login");
    } catch (error) {
        console.error("‚ùå Erreur lors de la d√©connexion :", error.response?.data || error.message);
    }
};

// ‚úÖ R√©cup√©ration des infos utilisateur avec v√©rification d'expiration
export const getUserInfo = () => {
    const token = getToken();
    if (!token) {
        console.warn("‚ö†Ô∏è Aucun token trouv√©.");
        return null;
    }

    try {
        const decodedToken = jwtDecode(token);
        console.log("üîç Token d√©cod√© :", decodedToken);

        // ‚úÖ V√©rification si le token est expir√©
        const now = Date.now() / 1000;
        if (decodedToken.exp && decodedToken.exp < now) {
            console.warn("‚ö†Ô∏è Le token a expir√© !");
            sessionStorage.removeItem(TOKEN_KEY);
            return null;
        }

        return { nom: decodedToken.nom, prenom: decodedToken.prenom };
    } catch (error) {
        console.error("‚ùå Erreur lors du d√©codage du token :", error.message);
        return null;
    }
};
